the .test() method takes the regex, applies it to a string (which is placed inside the parentheses), 
and returns true or false if your pattern finds something or not.

const str = 'hello world!';
const result = /^hello/.test(str);

console.log(result); // true


–ò–õ–ò –¢–ê–ö:
let myString = "Hello, World!";
let myRegex = /Hello/;
let result = myRegex.test(myString); 

!!!!!!!!Any other forms of Kevin will not match. For example, the regex /Kevin/ will not match kevin or KEVIN

You can do this by adding more patterns with more OR operators separating them, like /dog|cat|bird|fish/
the flag that ignores case - the i flag. 
/ignorecase/i. This regex can match the strings ignorecase, igNoreCase, and IgnoreCase.


'string'.match(/regex/);
/regex/.test('string');


You can also extract the actual matches you found with the .match() method.
"Hello, World!".match(/Hello/);
let ourStr = "Regular expressions";


let ourRegex = /expressions/;
ourStr.match(ourRegex);

let codingRegex = /coding/; 
let result = extractStr.match(codingRegex); 
üíïüíï



To search or extract a pattern more than once, you can use the global search flag: g.
let twinkleStar = "Twinkle, twinkle, little star";
let starRegex = /twinkle/gi; 
let result = twinkleStar.match(starRegex);


The wildcard character . will match any one character. The wildcard is also called dot and period
hug, huh, hut, and hum, you can use the regex /hu./


For example, you want to match bag, big, and bug but not bog. You can create the regex /b[aiu]g/ to do this. 
The [aiu] is the character class that will only match the characters a, i, or u
let vowelRegex = /[aeiou]/gi; 

Inside a character set, you can define a range of characters to match using a hyphen character: -.
For example, to match lowercase letters a through e you would use [a-e]
let myRegex = /[h-s2-6]/gi; // - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ –±—É–∫–≤–∞–º–∏, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ —á–∏—Å–ª–∞
